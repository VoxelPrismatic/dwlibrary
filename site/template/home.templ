package template

import (
    "dwlibrary/site/data"
    "fmt"
)

type HomeCardKwargs struct {
    Title string
    Subtitle string
    Image string
    Links []HomeCardLink
}

type HomeCardLink struct {
    Title string
    Link string
}

func home_cards() []data.SiteHomeEntry {
    db := data.ForceConnect()
    ret := []data.SiteHomeEntry{}
    db.Model(&data.SiteHomeEntry{}).Order("random()").Find(&ret)

    return ret
}

templ Home(user data.UserEntry) {
    @Head("DWLibrary", "DWLibrary, the digital library for the DailyWire.")
    <body>
        <div class="home masonry">
            for _, card := range home_cards() {
                @HomeCard(user, card)
            }
        </div>
        @Buttons(user, "/home")
        <script type="text/javascript" src="/src/js/script.js"></script>
    </body>
}

templ HomeCard(user data.UserEntry, kwargs data.SiteHomeEntry) {
    <div class="home-card post" id={ kwargs.Show }>
        <div class="head">
            <div class="img">
                <img src={ kwargs.Image } />
            </div>
            <div class="title">
                <h1 class="series">
                    { kwargs.Title }
                </h1>
                <h3 class="description">
                    { kwargs.Subtext }
                </h3>
            </div>
        </div>

        <div class="links">
            for _, link := range kwargs.GetLinks() {
                @HomeLink(user, kwargs, link)
            }
            if user.IsAdmin {
                @HomeLink(user, kwargs, data.SiteHomeLinkEntry{Placement: len(kwargs.GetLinks())})
            }
        </div>
    </div>
}

templ HomeLink(user data.UserEntry, kwargs data.SiteHomeEntry, link data.SiteHomeLinkEntry) {
    <div class="anchor" id={ fmt.Sprintf("%s-%d", kwargs.Show, link.Placement) }>
        <div class="link">
            <a href={ templ.SafeURL(link.Link) }>
                { link.Text }
            </a>
        </div>
        if user.IsAdmin {
            <div class="edit">
                if link.Placement == len(kwargs.GetLinks()) {
                    <button hx-patch={ fmt.Sprintf("/htmx/home/%s/%d", kwargs.Show, link.Placement) }
                        hx-target={ fmt.Sprintf("#%s-%d", kwargs.Show, link.Placement) }
                        hx-trigger="click"
                        hx-swap="outerHTML"
                        title="New Link"
                    >
                        @SvgIcon("dazzle", "plus")
                    </button>
                } else {
                    <button hx-patch={ fmt.Sprintf("/htmx/home/%s/%d", kwargs.Show, link.Placement) }
                        hx-target={ fmt.Sprintf("#%s-%d", kwargs.Show, link.Placement) }
                        hx-trigger="click"
                        hx-swap="outerHTML"
                        title="Edit Link"
                    >
                        @SvgIcon("dazzle", "pencil")
                    </button>
                }
            </div>
        }
    </div>
}

templ EditHomeLink(user data.UserEntry, kwargs data.SiteHomeEntry, link data.SiteHomeLinkEntry) {
    <div class="anchor edit" id={ fmt.Sprintf("%s-%d", kwargs.Show, link.Placement) }>
        <form hx-post={ fmt.Sprintf("/htmx/home/%s/%d", kwargs.Show, link.Placement) }
            hx-target={ fmt.Sprintf("#%s-%d", kwargs.Show, link.Placement) }
            hx-swap="outerHTML"
        >
            <div>
                <input class="link" data-id="link-text" type="text" name="text" value={ link.Text } placeholder="Link Text"/>
                <div class="save">
                    <button type="submit" class="save" title="Save Link">
                        @SvgIcon("dazzle", "floppy-disk")
                    </button>
                </div>
            </div>
            <div>
                <input class="link" data-id="link-url" type="text" name="url" value={ link.Link } placeholder="Link URL"/>
                <div class="undo">
                    <button hx-get={ fmt.Sprintf("/htmx/home/%s/%d", kwargs.Show, link.Placement) }
                        hx-target={ fmt.Sprintf("#%s-%d", kwargs.Show, link.Placement) }
                        hx-swap="outerHTML"
                        class="undo"
                        title="Discard Changes"
                    >
                        @SvgIcon("dazzle", "trash-undo")
                    </button>
                </div>
                <div class="delete">
                    <button hx-delete={ fmt.Sprintf("/htmx/home/%s/%d", kwargs.Show, link.Placement) }
                        hx-confirm="Are you sure you want to delete this link?"
                        hx-target={ fmt.Sprintf("#%s", kwargs.Show) }
                        hx-swap="outerHTML"
                        class="delete"
                        title="Delete Link"
                    >
                        @SvgIcon("dazzle", "trash")
                    </button>
                </div>
            </div>
        </form>
    </div>
}
