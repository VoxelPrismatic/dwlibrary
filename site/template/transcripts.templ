package template

import (
    "dwlibrary/site/data"
    "fmt"
)

templ TranscriptEpisode(link data.Link) {
    <div class="episode">
        <div class="img">
            <a href={ templ.SafeURL("/episode/" + link.Name) }>
                <img src={ link.Thumb } />
            </a>
            <div class="links">
                if link.LinkDW != "" {
                    <a href={ templ.SafeURL(link.LinkDW) } target="_blank">
                        <img src="/src/icon/dw.svg" />
                    </a>
                }
                if link.LinkX != "" {
                    <a href={ templ.SafeURL(link.LinkX) } target="_blank">
                        <img src="/src/icon/x.svg" />
                    </a>
                }
                if link.LinkRUM != "" {
                    <a href={ templ.SafeURL(link.LinkRUM) } target="_blank">
                        <img src="/src/icon/rumble.svg" />
                    </a>
                }
                if link.LinkYT != "" {
                    <a href={ templ.SafeURL(link.LinkYT) } target="_blank">
                        <img src="/src/icon/yt.svg" />
                    </a>
                }
            </div>
        </div>
        <div class="details">
            <h1>{ link.Title }</h1>
            <h4 class="timestamp">
                <a href={ templ.SafeURL("/transcripts/" + link.Series) }>
                    { link.GetSeries().Title }
                </a>
                { "\u2014" }
                <span class="date">
                    { ToDate(link.Date) }
                </span>
            </h4>
            <p>{ link.Description }</p>
        </div>
    </div>
}

type TranscriptSearchKwargs struct {
    Page int
    Length int64
    PageSize int
    Query string
    Filter string
    Show string
    Episodes []data.Link
}

func (t TranscriptSearchKwargs) MaxPage() int {
    m := int(t.Length) / t.PageSize
    if int(t.Length) % t.PageSize > 0 {
        m++
    }
    return m
}

func (t TranscriptSearchKwargs) GetSeries() data.SiteDwSeriesEntry {
    db := data.ForceConnect()
    ret := data.SiteDwSeriesEntry{}
    db.Where("show = ?", t.Show).First(&ret)
    return ret
}

func get_shows() []data.SiteDwSeriesEntry {
    db := data.ForceConnect()
    ret := []data.SiteDwSeriesEntry{}
    db.Model(&data.SiteDwSeriesEntry{}).Order("title asc").Find(&ret)
    return ret
}

templ TranscriptEpisodeListing(user data.UserEntry, kwargs TranscriptSearchKwargs) {
    @Head("DWLibrary - Episodes", "DWLibrary, the digital library for the DailyWire.")
    <body>
        <div class="search">
            <form hx-post={ "/htmx/transcript-search" }
                hx-target="body"
                hx-swap="outerHTML"
            >
                <div class="flex-col">
                    <div class="flex-row">
                        <input type="text" name="q" placeholder="Search" value={ kwargs.Query } style="width:100%"/>
                        <button type="submit" class="action search">
                            @SvgIcon("dazzle", "search")
                        </button>
                    </div>
                    <div class="flex-row">
                        <select name="show" value={ kwargs.Show }
                            hx-post={ fmt.Sprintf("/htmx/transcript-list/") }
                            hx-target="#results"
                            hx-swap="outerHTML"
                            hx-trigger="change"
                        >
                            <option value="">All</option>
                            for _, show := range get_shows() {
                                if kwargs.Show == show.Show {
                                    <option value={ show.Show } selected>{ show.Title }</option>
                                } else {
                                    <option value={ show.Show }>{ show.Title }</option>
                                }
                            }
                        </select>
                        <select name="filter" value={ kwargs.Filter }>
                            <option value="">All fields</option>
                            <option value="title">Title</option>
                            <option value="description">Description</option>
                            <option value="transcript">Transcript [not implemented]</option>
                            <option value="tags">Tags [not implemented]</option>
                        </select>
                    </div>
                </div>
            </form>
        </div>
        @TranscriptListEpisodes(kwargs)
        @Buttons(user, EditBtn{})
        <script type="text/javascript" src="/src/js/script.js"></script>
    </body>
}

templ TranscriptListEpisodes(kwargs TranscriptSearchKwargs) {
    <div class="listing" id="results">
        for _, episode := range kwargs.Episodes {
            @TranscriptEpisode(episode)
        }
        @EpisodeListingFilterPage(kwargs)
    </div>
}

templ EpisodeListingFilterPage(kwargs TranscriptSearchKwargs) {
    <div class="search" id="page-filter">
        <div class="flex-row">
            if kwargs.Page == 1 {
                <button class="action page disable" title="Previous page">
                    @SvgIcon("dazzle", "caret-left")
                </button>
            } else {
                <button class="action page" title="Previous page"
                    hx-get={ fmt.Sprintf("/htmx/transcript-list/%s/%d/%s?q=%s", kwargs.Show, kwargs.Page - 1, kwargs.Filter, kwargs.Query) }
                    hx-target="#results"
                    hx-swap="outerHTML"
                    hx-trigger="click"
                >
                    @SvgIcon("dazzle", "caret-left")
                </button>
            }
            <input
                id="pageno"
                type="number"
                name="page"
                value={ fmt.Sprint(kwargs.Page) }
                min="1"
                max={ fmt.Sprint(kwargs.MaxPage()) }
                hx-patch={ fmt.Sprintf("/htmx/transcript-list/%s/%s?q=%s", kwargs.Show, kwargs.Filter, kwargs.Query) }
                hx-target="#results"
                hx-swap="outerHTML"
                hx-trigger="change"
            />
            if kwargs.Page == kwargs.MaxPage() {
                <button class="action page disable" title="Next page">
                    @SvgIcon("dazzle", "caret-right")
                </button>
            } else {
                <button class="action page" title="Previous page"
                    hx-get={ fmt.Sprintf("/htmx/transcript-list/%s/%d/%s?q=%s", kwargs.Show, kwargs.Page + 1, kwargs.Filter, kwargs.Query) }
                    hx-target="#results"
                    hx-swap="outerHTML"
                    hx-trigger="click"
                >
                    @SvgIcon("dazzle", "caret-right")
                </button>
            }
        </div>
    </div>
}
