
package template

import (
    "dwlibrary/site/data"
    "fmt"
)

func dw_series_cards() []data.SiteDwSeriesEntry {
    db := data.ForceConnect()
    ret := []data.SiteDwSeriesEntry{}
    db.Model(&data.SiteDwSeriesEntry{}).Order("random()").Find(&ret)

    return ret
}

templ DwSeries(user data.UserEntry) {
    @Head("DWLibrary", "DWLibrary, the digital library for the DailyWire.")
    <body>
        <div class="home masonry">
            for _, card := range dw_series_cards() {
                @DwSeriesCard(user, card)
            }
            @DwSeriesCardTemplate(user)
        </div>
        @Buttons(user, EditBtn{})
        <script type="text/javascript" src="/src/js/script.js"></script>
    </body>
}

templ DwSeriesCardTemplate(user data.UserEntry) {
    if user.IsAdmin {
        <div class="home-card post template" id="__template__">
            <div class="head">
                <div class="title">
                    <h1 class="series">
                        New Series
                    </h1>
                    <div>
                        <p>Enter the show ID below, eg "matt" or "crain"</p>
                        <p>Title & other details will be available on the next screen</p>
                        <p>This ID <b>CANNOT</b> be changed</p>
                    </div>
                </div>
            </div>
            <form hx-put="/htmx/series-card/__template__" hx-target="#__template__" hx-swap="outerHTML">
                <input type="text" name="show" value="" placeholder="Series ID" class="mono"/>
                <button type="submit" class="action new" title="Create Card">
                    @SvgIcon("dazzle", "plus")
                </button>
            </form>
        </div>
    }
}

templ DwSeriesCardPlusTemplate(user data.UserEntry, kwargs data.SiteDwSeriesEntry) {
    @DwSeriesCard(user, kwargs)
    @DwSeriesCardTemplate(user)
}

templ DwSeriesCard(user data.UserEntry, kwargs data.SiteDwSeriesEntry) {
    <div class="home-card post" id={ kwargs.Show }>
        @DwSeriesHead(user, kwargs)

        <div class="links">
            for _, link := range kwargs.GetLinks() {
                @DwSeriesLink(user, kwargs, link, false)
            }
            if user.IsAdmin {
                @DwSeriesLink(user, kwargs, data.SiteDwSeriesLinkEntry{Placement: len(kwargs.GetLinks())}, false)
            }
        </div>
    </div>
}

templ DwSeriesHead(user data.UserEntry, kwargs data.SiteDwSeriesEntry) {
    <div class="head" id={ kwargs.Show + "-head" }>
        <div class="img">
            <img src={ kwargs.Image } />
            if user.IsAdmin {
                <button hx-patch={ fmt.Sprintf("/htmx/series-card/%s", kwargs.Show) }
                    hx-target={ fmt.Sprintf("#%s-head", kwargs.Show) }
                    hx-trigger="click"
                    hx-swap="outerHTML"
                    title="Edit Card"
                    class="action edit glass"
                >
                    @SvgIcon("dazzle", "pencil")
                </button>
            }
        </div>
        <div class="title">
            <h1 class="series">
                { kwargs.Title }
            </h1>
        </div>
    </div>
}


templ EditDwSeriesHead(user data.UserEntry, kwargs data.SiteDwSeriesEntry) {
    <div class="head edit" id={ kwargs.Show + "-head" }>
        <form hx-post={ fmt.Sprintf("/htmx/series-card/%s", kwargs.Show) }
            hx-target={ fmt.Sprintf("#%s-head", kwargs.Show) }
            hx-swap="outerHTML"
        >
            <div class="img">
                <img src={ kwargs.Image } id={ kwargs.Show + "-image" }/>
                <input style="display:none" type="text" name="url" value={ kwargs.Image } />
                <div class="token">
                    { kwargs.Show }
                </div>
            </div>
            <div class="upload">
                <input type="file"
                    name="image"
                    accept="image/*"
                    onchange="uploadImage(this)"
                    data-for={ "#" + kwargs.Show + "-image" }
                />
                <button hx-get={ fmt.Sprintf("/htmx/series-card/%s", kwargs.Show) }
                    hx-target={ fmt.Sprintf("#%s-head", kwargs.Show) }
                    hx-trigger="click"
                    hx-swap="outerHTML"
                    title="Discard Changes"
                    class="action undo"
                >
                    @SvgIcon("dazzle", "trash-undo")
                </button>
                <button hx-delete={ fmt.Sprintf("/htmx/series-card/%s", kwargs.Show) }
                    hx-target={ fmt.Sprintf("#%s", kwargs.Show) }
                    hx-trigger="click"
                    hx-swap="outerHTML"
                    title="Delete Card"
                    hx-confirm="Are you sure you want to delete this card?"
                    class="action delete"
                >
                    @SvgIcon("dazzle", "trash")
                </button>
                <button type="submit" class="action save" title="Save Card">
                    @SvgIcon("dazzle", "floppy-disk")
                </button>

            </div>
            <div class="title">
                <h1 class="series">
                    <input type="text" name="title" value={ kwargs.Title }/>
                </h1>
            </div>
        </form>
    </div>
}

templ DwSeriesLink(user data.UserEntry, kwargs data.SiteDwSeriesEntry, link data.SiteDwSeriesLinkEntry, syncing bool) {
    <div class="anchor" id={ fmt.Sprintf("%s-%d", kwargs.Show, link.Placement) }>
        <div>
            <div class="link">
                <span>
                    { fmt.Sprint(link.Year) }
                    <span class="details">
                        { "\u2014" }
                        { fmt.Sprint(len(link.GetEpisodes())) }
                        if len(link.GetEpisodes()) == 1 {
                            episode
                        } else {
                            episodes
                        }
                    </span>
                </span>
            </div>
            if user.IsAdmin {
                <div class="edit flex">
                    if link.Placement == len(kwargs.GetLinks()) {
                        <button hx-patch={ fmt.Sprintf("/htmx/series-link/%s/%d", kwargs.Show, link.Placement) }
                            hx-target={ fmt.Sprintf("#%s-%d", kwargs.Show, link.Placement) }
                            hx-trigger="click"
                            hx-swap="outerHTML"
                            title="New Link"
                            class="action new"
                        >
                            @SvgIcon("dazzle", "plus")
                        </button>
                    } else {
                        <button hx-patch={ fmt.Sprintf("/htmx/series-link/%s/%d", kwargs.Show, link.Placement) }
                            hx-target={ fmt.Sprintf("#%s-%d", kwargs.Show, link.Placement) }
                            hx-trigger="click"
                            hx-swap="outerHTML"
                            title="Edit Link"
                            class="action edit"
                        >
                            @SvgIcon("dazzle", "pencil")
                        </button>
                        @DwSeriesSyncBtn(user, link, syncing)
                    }
                </div>
            }
        </div>
        <div class="behind">
            <input class="link" data-id="link-url" type="text" name="url" value={ link.Link } placeholder="Link URL"/>
        </div>
    </div>
}

templ DwSeriesSyncBtn(user data.UserEntry, link data.SiteDwSeriesLinkEntry, syncing bool) {
    if syncing {
        <button hx-get={ fmt.Sprintf("/htmx/series-sync/%s/%s", link.Show, link.Link) }
            hx-target={ fmt.Sprintf("#%s-%d", link.Show, link.Placement) }
            hx-trigger="load delay:1s"
            hx-swap="outerHTML"
            title="Sync Series"
            class="action sync rot disable"
            id={ fmt.Sprintf("sync-%s-%d", link.Show, link.Placement) }
        >
            @SvgIcon("dazzle", "loader")
        </button>
    } else {
        <button hx-get={ fmt.Sprintf("/htmx/series-sync/%s/%s", link.Show, link.Link) }
            hx-target={ fmt.Sprintf("#%s-%d", link.Show, link.Placement) }
            hx-trigger="click"
            hx-swap="outerHTML"
            title="Sync Series"
            class="action sync"
            id={ fmt.Sprintf("sync-%s-%d", link.Show, link.Placement) }
        >
            @SvgIcon("dazzle", "refresh-ccw-alt-1")
        </button>
    }
}

templ EditDwSeriesLink(user data.UserEntry, kwargs data.SiteDwSeriesEntry, link data.SiteDwSeriesLinkEntry) {
    <div class="anchor edit" id={ fmt.Sprintf("%s-%d", kwargs.Show, link.Placement) }>
        <form hx-post={ fmt.Sprintf("/htmx/series-link/%s/%d", kwargs.Show, link.Placement) }
            hx-target={ fmt.Sprintf("#%s-%d", kwargs.Show, link.Placement) }
            hx-swap="outerHTML"
        >
            <div>
                <input class="link"
                    data-id="link-text"
                    type="number"
                    name="year"
                    value={ fmt.Sprint(link.Year) }
                    placeholder="Link Text"/>
                <div class="edit">
                    <button type="submit" class="action save" title="Save Link">
                        @SvgIcon("dazzle", "floppy-disk")
                    </button>
                </div>
            </div>
            <div class="behind">
                <input class="link" data-id="link-url" type="text" name="url" value={ link.Link } placeholder="GraphQL series ID"/>
                <div class="undo">
                    <button hx-get={ fmt.Sprintf("/htmx/series-link/%s/%d", kwargs.Show, link.Placement) }
                        hx-target={ fmt.Sprintf("#%s-%d", kwargs.Show, link.Placement) }
                        hx-swap="outerHTML"
                        class="action undo"
                        title="Discard Changes"
                    >
                        @SvgIcon("dazzle", "trash-undo")
                    </button>
                </div>
                <div class="delete">
                    <button hx-delete={ fmt.Sprintf("/htmx/series-link/%s/%d", kwargs.Show, link.Placement) }
                        hx-confirm="Are you sure you want to delete this link?"
                        hx-target={ fmt.Sprintf("#%s", kwargs.Show) }
                        hx-swap="outerHTML"
                        class="action delete"
                        title="Delete Link"
                    >
                        @SvgIcon("dazzle", "trash")
                    </button>
                </div>
            </div>
        </form>
    </div>
}
